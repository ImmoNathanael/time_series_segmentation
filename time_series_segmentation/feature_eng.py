# AUTOGENERATED! DO NOT EDIT! File to edit: 01_feature_eng.ipynb (unless otherwise specified).

__all__ = ['add_seq_indicator', 'dataframe_split']

# Cell
import time
import pandas as pd
import numpy as np
import random

from fastcore.test import *
from time_series_segmentation import *

# Cell
def add_seq_indicator(data_index, seq_len=20):
    '''
    function to be used with apply in df.
    Assings sequence labels to sections of the data which allows us to randomly train/val/test splitt the subsequences.
    the acctual splitt

    Parameters:

    Output:

    '''
    return np.int(np.ceil((data_index.name+1)/seq_len))

# Cell
def dataframe_split(data, fraction = 0.1, random_state = 42, sep_col='seq_idx'):
    '''
    Creates a random split by the desired column
    '''
    if sep_col not in data.columns:
        data[sep_col] = data.apply(add_seq_indicator,seq_len=1000)

    random.seed(random_state)
    sequence_numbers = data[sep_col].unique().tolist()
    k = int(np.ceil(data[sep_col].nunique()*fraction))
    split_list = random.sample(sequence_numbers, k=k)
    test = data.loc[data[sep_col].isin(split_list), :]
    train = data.drop(test.index)
    return train, test